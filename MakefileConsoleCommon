ifeq ($(PLATFORM),win32)
#CXX = x86_64-w64-mingw32-g++-posix
#CC = x86_64-w64-mingw32-gcc
FINALEXECFILE = $(EXECFILE).exe
PLATFORMLIBFLAGS = $(WIN32_LIBFLAGS) -static-libstdc++ -static-libgcc -lwinmm -lws2_32 -lIphlpapi -static -pthread -lz -lschannel -lcrypt32
else
FINALEXECFILE = $(EXECFILE)
PLATFORMLIBFLAGS = $(LINUX_LIBFLAGS) -lz
endif

FINALLIBFLAGS = $(COMMONLIBFLAGS) $(PLATFORMLIBFLAGS)

LINKOBJ = $(patsubst %,$(OBJDIR)/%,$(_LINKOBJ))
C_LINKOBJ = $(patsubst %,$(OBJDIR)/%,$(_C_LINKOBJ))

ifeq ($(DEBUG),1)#normal debugging
OPTIM = $(USEROPTIM) -g -DDEBUG=1
else ifeq ($(DEBUG),2)#debugging with address sanitizer
OPTIM = $(USEROPTIM) -fsanitize=address -static-libasan -fno-omit-frame-pointer -g3 -DDEBUG=2
else ifeq ($(DEBUG),3)#no debugging, no optimizations
OPTIM = $(USEROPTIM) -s -O0 -DNDEBUG
else#no debugging, with optimizations
OPTIM = $(USEROPTIM) -O3 -DNDEBUG
endif

all_linux: CPPFLAGS += -std=c++11

all_linux: build_deps $(LINKOBJ) $(C_LINKOBJ)
	$(CXX) $(CPPFLAGS) $(OPTIM) $(LINKOBJ) -o $(FINALEXECFILE) $(FINALLIBFLAGS)

# Create dependency files for automatic recompilation
$(LINKOBJ:.o=.d):$(OBJDIR)/%.d:$(SRCDIR)/%.cpp
	@mkdir -p $(@D)
	$(CXX) $(CPPFLAGS) -MM -MF $@ $<
	sed -i -e "1s;.*;$(@D)/\0;" $@
	echo "	$(CXX) $(CPPFLAGS) -c $(OPTIM) $< -o $(@:.d=.o)" >> $@
	
$(C_LINKOBJ:.o=.d):$(OBJDIR)/%.d:$(SRCDIR)/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -MM -MF $@ $<
	sed -i -e "1s;.*;$(@D)/\0;" $@
	echo "	$(CC) $(CFLAGS) -c $(OPTIM) $< -o $(@:.d=.o)" >> $@

ifneq ($(MAKECMDGOALS),clean)
-include $(LINKOBJ:.o=.d)
-include $(C_LINKOBJ:.o=.d)
endif

# Cleans all temporary files and compilation results.
clean: clean_deps
	$(RM) -r $(OBJDIR)
	$(RM) $(FINALEXECFILE)


.PHONY: all clean
