ifeq ($(PLATFORM),win32)
FINALOBJDIR = $(OBJDIR)/win32
CXX = x86_64-w64-mingw32-g++-posix
CC = x86_64-w64-mingw32-gcc
FINALEXECFILE = $(EXECFILE).exe
PLATFORMLIBFLAGS = $(WIN32_LIBFLAGS) -static-libstdc++ -static-libgcc 
ifeq ($(DEBUG),1)
CXX += -gstabs
endif
else
FINALOBJDIR = $(OBJDIR)
FINALEXECFILE = $(EXECFILE)
PLATFORMLIBFLAGS = $(LINUX_LIBFLAGS)
endif

ifeq ($(PLATFORM),)
FINALLIBFLAGS = $(COMMONLIBFLAGS) $(PLATFORMLIBFLAGS)
else
FINALLIBFLAGS = $(patsubst -l%,-l%_$(PLATFORM),$(COMMONLIBFLAGS)) $(PLATFORMLIBFLAGS)
endif

LINKOBJ = $(patsubst %,$(FINALOBJDIR)/%,$(_LINKOBJ))
C_LINKOBJ = $(patsubst %,$(FINALOBJDIR)/%,$(_C_LINKOBJ))

ifeq ($(DEBUG),1)
OPTIM = $(USEROPTIM) -g -DDEBUG=1
else ifeq ($(DEBUG),2)
OPTIM = $(USEROPTIM) -fsanitize=address -fno-omit-frame-pointer -g3 -DDEBUG=2
else
OPTIM = $(USEROPTIM) -O3 -DNDEBUG
endif

all_linux: build_deps $(LINKOBJ) $(C_LINKOBJ)
	$(CXX) $(CPPFLAGS) $(OPTIM) $(LINKOBJ) -o $(FINALEXECFILE) $(FINALLIBFLAGS)

# Create dependency files for automatic recompilation
$(FINALOBJDIR)/%.d:$(SRCDIR)/%.cpp
	@mkdir -p $(@D)
	$(CXX) $(CPPFLAGS) -MM -MF $@ $<
	sed -i -e "1s;.*;$(FINALOBJDIR)/\0;" $@
	echo "	$(CXX) $(CPPFLAGS) -c $(OPTIM) $< -o $(@:.d=.o)" >> $@

$(FINALOBJDIR)/%.d:$(SRCDIR)/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -MM -MF $@ $<
	sed -i -e "1s;.*;$(FINALOBJDIR)/\0;" $@
	echo "	$(CC) $(CFLAGS) -c $(OPTIM) $< -o $(@:.d=.o)" >> $@

ifneq ($(MAKECMDGOALS),clean)
-include $(LINKOBJ:.o=.d)
endif

# Cleans all temporary files and compilation results.
clean: clean_deps
	$(RM) $(LINKOBJ) $(LINKOBJ:.o=.d)
	$(RM) $(FINALEXECFILE)


.PHONY: all clean
